Ruby Identifiers

Local variables - LOWEST SCOPE:consist of letters, underscores and or digits. USE UNDERSCORES AND NOT camelCase.
The scope of a local variable ranges from class, module, def, or do to the corresponding end or from a block's opening brace to its close brace {}.
Instance variables - OBJECT SCOPE e.g. seen everwhere in object and starts with @.
Class variables - CLASS SCOPE and start with @@. An example is counting object instances.
Global variables - USED ANYWHERE start with a $ and can be used anywhere, not reccommended.

Constants - Start with a capital and use camelCase

Methods - Start with a lowercase and use underscores and not

Objects - Everything(strings, integers, values etc..) in ruby is an object.
		Every object can understand a certain set of messages.
		Each messages maps directly to a method:name executable routine whose execution the object has the ability to trigger.
Message sending is done via dot operator e.g. the message on the right is sent to the object on the left e.g. "100".to_i here the message "to_i" is sent to the string "100" object. The message maps to a method.
Sending the message "to_i" and Calling the method to_i becasue sometimes there is no corresponding method.

Methods can take arguments which are also objects. e.g. x = "100".to_i(9) call to_i on 100 with an argument of 9.

Programming ruby is specifing what you want the objects to do (by def methods) or asking the objects to do something (sending messages).

Classes define clusters of object behaviour and EVERY OBJECT is an INSTANCE of EXACTLY ONE CLASS. The class is responsible for launching the Object but the object thereafter has its own life.


Loading external files and switches:
Breaking a program in separate files makes dealing with a lot of code easier. 
Ruby require and load methods allow you bring code into your file from another file
load 'file name' : always loads the file you ask for e.g. if you make a change to a file and reload and will take this newest version
require : same as load but if called more than once doesn't reload the file again e.g. if file changes you don't get the newest version.

Ruby switches: ruby -h for a list of switches
Some useful ones
-cw checks the syntax with executing and gives you warnings
-v shows the version of ruby your running
-e runs the code in the quotes e.g. ruby -e "puts 'this will run the puts and this text'" 

irb:
--simple-prompt running in simple 
When irb sees an expression it prints it out its value. That's why irb is always printing out your varialble assignments e.g
>>days = 365
=>365
here we have an assignment express with the varible days assigned to the value 365 hence irb prints the expressions value.

Using --noecho flag will stop irb from doing this.

ri and RDoc:
To enable ri you need to edit ~/.gemrc and remove the --no-ri section. 
RDoc - Ruby Documentation(includes the command line tool) It takes your comments and creates nicely formatted documentation from them.
	RDoc uses SimpleMarkup for its syntax which is XML-style tags.
	YARD is an alternative to RDoc and may be better.
ri - Ruby Index(command line tool) Gives you a way to view the info in RDoc e.g. ri String#upcase

rake take-management utility:
Like make, rake reads and executes tasks defined in a file—a Rakefile. Unlike make, however, rake uses Ruby syntax to define its tasks.
When you compile your code you repeat a number of steps they require an order or dependency on something else. Rakefiles are a set of build tasks that have depenencies on other tasks
e.g.     directory "tmp"
 
  file "tmp/hello.tmp" => "tmp" do
    sh "echo 'Hello' > 'tmp/hello.tmp'"
  end
  What we’re saying here is that the file named “hello.tmp” depends on the directory "tmp". When rake runs across this, it’s going to create the directory "tmp" first before running the "hello.tmp" task. 


gem command: way to install from the Rubygems library.
once you have your gem you use 'require' to use it in your file.

